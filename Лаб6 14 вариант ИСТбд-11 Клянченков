"""
Задание состоит из двух частей. 
1 часть – написать программу в соответствии со своим вариантом задания. Написать 2 варианта формирования (алгоритмический и с помощью функций Питона), сравнив по времени их выполнение.
2 часть – усложнить написанную программу, введя по своему усмотрению в условие минимум одно ограничение на характеристики объектов (которое будет сокращать количество переборов)  и целевую функцию для нахождения оптимального  решения.
Вариант 14
Конвейер сборки состоит из 10 технологических мест. На 4 из них требуется силовая подготовка (мужчины). Конвейер должен работать в 2 смены. Сформировать все возможные варианты рабочего расписания, если в цехе работает 20 рабочих: 12 женщин и 8 мужчин.
"""
import itertools
import time

# Исходные данные
total_workers = 20
women = 12
men = 8
shifts = 2
power_positions = 4
positions = 10

# Алгоритмический подход
def algorithmic_schedule_generation(women, men, power_positions, positions):
    schedules = []
    for men_comb in itertools.combinations(range(men), power_positions):
        for women_comb in itertools.combinations(range(women), positions - power_positions):
            schedules.append((men_comb, women_comb))
    return schedules

# Подход с использованием функций Python
def pythonic_schedule_generation(women, men, power_positions, positions):
    men_combinations = list(itertools.combinations(range(men), power_positions))
    women_combinations = list(itertools.combinations(range(women), positions - power_positions))
    return list(itertools.product(men_combinations, women_combinations))

# Замер времени выполнения алгоритмического подхода
start_time = time.time()
schedules_alg = algorithmic_schedule_generation(women, men, power_positions, positions)
end_time = time.time()
print(f"Алгоритмический подход: {end_time - start_time} секунд")

# Замер времени выполнения подхода с использованием функций Python
start_time = time.time()
schedules_py = pythonic_schedule_generation(women, men, power_positions, positions)
end_time = time.time()
print(f"Подход с использованием функций Python: {end_time - start_time} секунд")

# Вывод первых 5 расписаний для проверки
print("Первые 5 расписаний (алгоритмический подход):")
for schedule in schedules_alg[:5]:
    print(schedule)

print("\nПервые 5 расписаний (подход с использованием функций Python):")
for schedule in schedules_py[:5]:
    print(schedule)


# Усложненный алгоритмический подход
def complex_schedule_generation(women, men, shifts, power_positions, positions):
    one_shift_schedules = algorithmic_schedule_generation(women, men, power_positions, positions)
    two_shift_schedules = []
    for first_shift in one_shift_schedules:
        for second_shift in one_shift_schedules:
            if not set(first_shift[0]).intersection(second_shift[0]):  # Ограничение: мужчины не работают две смены подряд
                two_shift_schedules.append((first_shift, second_shift))
    return two_shift_schedules

# Целевая функция оценки расписания
def evaluate_schedule(schedule):
    # Минимизация количества смен с одними и теми же мужчинами на силовых позициях
    men_shifts = [shift[0] for shift in schedule]
    return len(set(men_shifts))

# Генерация и оценка оптимальных расписаний
start_time = time.time()
optimal_schedules = complex_schedule_generation(women, men, shifts, power_positions, positions)
optimal_schedules.sort(key=evaluate_schedule)  # Сортировка расписаний по целевой функции
end_time = time.time()
print(f"\nУсложненный алгоритм: {end_time - start_time} секунд")

# Вывод первых 5 оптимальных расписаний
print("Первые 5 оптимальных расписаний:")
for schedule in optimal_schedules[:5]:
    print(schedule)
