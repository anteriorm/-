import time
import itertools
# Исходные данные
total_workers = 20
women = 12
men = 8
shifts = 2
power_positions = 4
positions = 10
salary_cap = 10000

# Зарплаты работников
salaries = {
    'men': [1000, 1200, 1100, 1300, 1250, 1150, 1220, 1230],
    'women': [800, 850, 900, 950, 1000, 1050, 980, 1020, 990, 1010, 1030, 1040]
}

# Целевая функция оценки расписания
def schedule_cost(schedule):
    men_cost, women_cost = schedule
    #мин
    return sum(salaries['men'][m] for m in men_cost) + sum(salaries['women'][w] for w in women_cost)

# Функция для создания комбинаций без использования itertools.combinations
def custom_combinations(arr, k, start=0, curr=[]):
    if len(curr) == k:
        yield tuple(curr)
    else:
        for i in range(start, len(arr)):
            yield from custom_combinations(arr, k, i + 1, curr + [arr[i]])

# Алгоритмический подход с учетом вилки зарплаты и минимизации затрат
def algorithmic_schedule_generation(women, men, power_positions, positions, salary_cap):
    schedules = []
    for men_comb in custom_combinations(range(men), power_positions):
        for women_comb in custom_combinations(range(women), positions - power_positions):
            schedule = (men_comb, women_comb)
            cost = schedule_cost(schedule)
            if cost <= salary_cap:
                schedules.append(schedule)
    # Сортируем расписания по стоимости
    return sorted(schedules, key=schedule_cost)

# Питоновский подход с учетом вилки зарплаты
def pythonic_schedule_generation(women, men, power_positions, positions, salary_cap):
    men_combinations = list(itertools.combinations(range(men), power_positions))
    women_combinations = list(itertools.combinations(range(women), positions - power_positions))
    all_combinations = list(itertools.product(men_combinations, women_combinations))
    valid_schedules = [comb for comb in all_combinations if schedule_cost(comb) <= salary_cap]
    # Сортируем расписания по стоимости
    return sorted(valid_schedules, key=schedule_cost)

# Замер времени выполнения алгоритмического подхода
start_time = time.time()
schedules_alg = algorithmic_schedule_generation(women, men, power_positions, positions, salary_cap)
end_time = time.time()
print(f"Алгоритмический подход: {end_time - start_time} секунд")

# Замер времени выполнения подхода с использованием функций Python
start_time = time.time()
schedules_py = pythonic_schedule_generation(women, men, power_positions, positions, salary_cap)
end_time = time.time()
print(f"Подход с использованием функций Python: {end_time - start_time} секунд")

# Вывод первых 5 оптимальных расписаний для проверки
print("Первые 5 оптимальных расписаний (алгоритмический подход):")
for schedule in schedules_alg[:5]:
    print(schedule, schedule_cost(schedule))

print("\nПервые 5 оптимальных расписаний (подход с использованием функций Python):")
for schedule in schedules_py[:5]:
    print(schedule, schedule_cost(schedule))
